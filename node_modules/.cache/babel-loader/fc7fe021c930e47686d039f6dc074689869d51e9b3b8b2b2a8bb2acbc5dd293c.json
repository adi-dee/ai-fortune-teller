{"ast":null,"code":"var _jsxFileName = \"/Users/vectornator/Desktop/Ctech/CC1/Project/fortune-cookie/src/App.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import axios from 'axios';\n\n// function App() {\n//   const [fortune, setFortune] = useState('');\n//   const [color, setColor] = useState('black');\n\n//   const generateFortune = async () => {\n//     try {\n//       const response = await axios.post(\n//         'https://api.openai.com/v1/completions',\n//         {\n//           model: 'text-davinci-003',\n//           prompt: 'Generate a fortune cookie sentence',\n//           temperature: 0,\n//           max_tokens: 7,\n//         },\n//         {\n//           headers: {\n//             'Content-Type': 'application/json',\n//             Authorization: 'Bearer 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',\n//           },\n//         }\n//       );\n//       const newFortune = response.data.choices[0].text;\n//       setFortune(newFortune);\n//       setColor(getRandomColor());\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   };\n\n//   const getRandomColor = () => {\n//     const colors = ['red', 'blue', 'green', 'purple', 'orange'];\n//     return colors[Math.floor(Math.random() * colors.length)];\n//   };\n\n//   return (\n//     <div>\n//       <p style={{ color }}>{fortune}</p>\n//       <button onClick={generateFortune}>Get Fortune</button>\n//     </div>\n//   );\n// }\n\n// export default App;\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport FortuneType from './components/FortuneType';\nimport FortuneStyle from './components/FortuneStyle';\nimport AuraColor from './components/AuraColor';\nimport FortuneTeller from './components/FortuneTeller';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [fortuneType, setFortuneType] = useState(null);\n  const [fortuneStyle, setFortuneStyle] = useState(null);\n  const [auraColor, setAuraColor] = useState(null);\n  const [fortune, setFortune] = useState('');\n  const generateFortune = async () => {\n    try {\n      const response = await axios.post('https://api.openai.com/v1/completions', {\n        model: 'text-davinci-003',\n        prompt: `Generate a ${fortuneType} fortune in a ${fortuneStyle} concidering the aura meaning of the ${auraColor} color`,\n        temperature: 0,\n        max_tokens: 300\n      }, {\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer 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'\n        }\n      });\n      const newFortune = response.data.choices[0].text;\n      setFortune(newFortune);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-body\",\n    children: !fortuneType ? /*#__PURE__*/_jsxDEV(FortuneType, {\n      setFortuneType: setFortuneType\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this) : !fortuneStyle ? /*#__PURE__*/_jsxDEV(FortuneStyle, {\n      onStyleSelection: setFortuneStyle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this) : !auraColor ? /*#__PURE__*/_jsxDEV(AuraColor, {\n      setAuraColor: setAuraColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(FortuneTeller, {\n      fortune: fortune,\n      auraColor: auraColor,\n      generateFortune: generateFortune\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"aNVBAZz6BOMQdYW9piKjKw9mPws=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","axios","FortuneType","FortuneStyle","AuraColor","FortuneTeller","App","fortuneType","setFortuneType","fortuneStyle","setFortuneStyle","auraColor","setAuraColor","fortune","setFortune","generateFortune","response","post","model","prompt","temperature","max_tokens","headers","Authorization","newFortune","data","choices","text","error","console"],"sources":["/Users/vectornator/Desktop/Ctech/CC1/Project/fortune-cookie/src/App.js"],"sourcesContent":["// import React, { useState } from 'react';\n// import axios from 'axios';\n\n// function App() {\n//   const [fortune, setFortune] = useState('');\n//   const [color, setColor] = useState('black');\n\n//   const generateFortune = async () => {\n//     try {\n//       const response = await axios.post(\n//         'https://api.openai.com/v1/completions',\n//         {\n//           model: 'text-davinci-003',\n//           prompt: 'Generate a fortune cookie sentence',\n//           temperature: 0,\n//           max_tokens: 7,\n//         },\n//         {\n//           headers: {\n//             'Content-Type': 'application/json',\n//             Authorization: 'Bearer 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',\n//           },\n//         }\n//       );\n//       const newFortune = response.data.choices[0].text;\n//       setFortune(newFortune);\n//       setColor(getRandomColor());\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   };\n\n//   const getRandomColor = () => {\n//     const colors = ['red', 'blue', 'green', 'purple', 'orange'];\n//     return colors[Math.floor(Math.random() * colors.length)];\n//   };\n\n//   return (\n//     <div>\n//       <p style={{ color }}>{fortune}</p>\n//       <button onClick={generateFortune}>Get Fortune</button>\n//     </div>\n//   );\n// }\n\n// export default App;\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport FortuneType from './components/FortuneType';\nimport FortuneStyle from './components/FortuneStyle';\nimport AuraColor from './components/AuraColor';\nimport FortuneTeller from './components/FortuneTeller';\nimport './App.css';\n\nconst App = () => {\n  const [fortuneType, setFortuneType] = useState(null);\n  const [fortuneStyle, setFortuneStyle] = useState(null);\n  const [auraColor, setAuraColor] = useState(null);\n  const [fortune, setFortune] = useState('');\n\n  const generateFortune = async () => {\n    try {\n      const response = await axios.post(\n        'https://api.openai.com/v1/completions',\n        {\n          model: 'text-davinci-003',\n          prompt: `Generate a ${fortuneType} fortune in a ${fortuneStyle} concidering the aura meaning of the ${auraColor} color`,\n          temperature: 0,\n          max_tokens: 300,\n        },\n        {\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer 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',\n          },\n        }\n      );\n      const newFortune = response.data.choices[0].text;\n      setFortune(newFortune);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return (\n    <div className='app-body'>\n      {!fortuneType ? (\n        <FortuneType setFortuneType={setFortuneType} />\n      ) : !fortuneStyle ? (\n        <FortuneStyle onStyleSelection={setFortuneStyle} />\n      ) : !auraColor ? (\n        <AuraColor setAuraColor={setAuraColor} />\n      ) : (\n        <FortuneTeller fortune={fortune} auraColor={auraColor} generateFortune={generateFortune} />\n      )}\n    </div>\n  );\n};\n\nexport default App;"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,WAAW,MAAM,0BAA0B;AAClD,OAAOC,YAAY,MAAM,2BAA2B;AACpD,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,aAAa,MAAM,4BAA4B;AACtD,OAAO,WAAW;AAAC;AAEnB,MAAMC,GAAG,GAAG,MAAM;EAAA;EAChB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACS,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACW,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAE1C,MAAMe,eAAe,GAAG,YAAY;IAClC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMf,KAAK,CAACgB,IAAI,CAC/B,uCAAuC,EACvC;QACEC,KAAK,EAAE,kBAAkB;QACzBC,MAAM,EAAG,cAAaZ,WAAY,iBAAgBE,YAAa,wCAAuCE,SAAU,QAAO;QACvHS,WAAW,EAAE,CAAC;QACdC,UAAU,EAAE;MACd,CAAC,EACD;QACEC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClCC,aAAa,EAAE;QACjB;MACF,CAAC,CACF;MACD,MAAMC,UAAU,GAAGR,QAAQ,CAACS,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI;MAChDb,UAAU,CAACU,UAAU,CAAC;IACxB,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACtB;EACF,CAAC;EAED,oBACE;IAAK,SAAS,EAAC,UAAU;IAAA,UACtB,CAACrB,WAAW,gBACX,QAAC,WAAW;MAAC,cAAc,EAAEC;IAAe;MAAA;MAAA;MAAA;IAAA,QAAG,GAC7C,CAACC,YAAY,gBACf,QAAC,YAAY;MAAC,gBAAgB,EAAEC;IAAgB;MAAA;MAAA;MAAA;IAAA,QAAG,GACjD,CAACC,SAAS,gBACZ,QAAC,SAAS;MAAC,YAAY,EAAEC;IAAa;MAAA;MAAA;MAAA;IAAA,QAAG,gBAEzC,QAAC,aAAa;MAAC,OAAO,EAAEC,OAAQ;MAAC,SAAS,EAAEF,SAAU;MAAC,eAAe,EAAEI;IAAgB;MAAA;MAAA;MAAA;IAAA;EACzF;IAAA;IAAA;IAAA;EAAA,QACG;AAEV,CAAC;AAAC,GA3CIT,GAAG;AAAA,KAAHA,GAAG;AA6CT,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}