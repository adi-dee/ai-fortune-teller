{"ast":null,"code":"var _jsxFileName = \"/Users/vectornator/Desktop/Ctech/CC1/Project/fortune-teller/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport dotenv from 'dotenv';\nimport FortuneType from './components/FortuneType';\nimport FortuneStyle from './components/FortuneStyle';\nimport AuraColor from './components/AuraColor';\nimport FortuneTeller from './components/FortuneTeller';\nimport ResultCard from './components/ResultCard';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ndotenv.config();\nconst App = () => {\n  _s();\n  const [fortuneType, setFortuneType] = useState(null);\n  const [fortuneStyle, setFortuneStyle] = useState(null);\n  const [auraColor, setAuraColor] = useState(null);\n  const [fortune, setFortune] = useState('');\n  const generateFortune = async () => {\n    try {\n      const response = await axios.post('https://api.openai.com/v1/completions', {\n        model: 'text-davinci-003',\n        prompt: `Generate a ${fortuneType} fortune in a ${fortuneStyle} concidering the aura meaning of the ${auraColor} color`,\n        temperature: 0,\n        max_tokens: 300\n      }, {\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + process.env.REACT_APP_API_KEY\n        }\n      });\n      const newFortune = response.data.choices[0].text;\n      setFortune(newFortune);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-body\",\n    children: [!fortuneType ? /*#__PURE__*/_jsxDEV(FortuneType, {\n      setFortuneType: setFortuneType\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this) : !fortuneStyle ? /*#__PURE__*/_jsxDEV(FortuneStyle, {\n      onStyleSelection: setFortuneStyle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this) : !auraColor ? /*#__PURE__*/_jsxDEV(AuraColor, {\n      setAuraColor: setAuraColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(FortuneTeller, {\n      fortune: fortune,\n      auraColor: auraColor,\n      generateFortune: generateFortune\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [!fortuneType ? null : /*#__PURE__*/_jsxDEV(ResultCard, {\n        backText: fortuneType\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 34\n      }, this), !fortuneStyle ? null : /*#__PURE__*/_jsxDEV(ResultCard, {\n        backText: fortuneStyle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 35\n      }, this), !auraColor ? null : /*#__PURE__*/_jsxDEV(ResultCard, {\n        backText: auraColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 32\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"aNVBAZz6BOMQdYW9piKjKw9mPws=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","axios","dotenv","FortuneType","FortuneStyle","AuraColor","FortuneTeller","ResultCard","config","App","fortuneType","setFortuneType","fortuneStyle","setFortuneStyle","auraColor","setAuraColor","fortune","setFortune","generateFortune","response","post","model","prompt","temperature","max_tokens","headers","Authorization","process","env","REACT_APP_API_KEY","newFortune","data","choices","text","error","console"],"sources":["/Users/vectornator/Desktop/Ctech/CC1/Project/fortune-teller/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport dotenv from 'dotenv';\nimport FortuneType from './components/FortuneType';\nimport FortuneStyle from './components/FortuneStyle';\nimport AuraColor from './components/AuraColor';\nimport FortuneTeller from './components/FortuneTeller';\nimport ResultCard from './components/ResultCard';\nimport './App.css';\n\ndotenv.config();\n\nconst App = () => {\n  const [fortuneType, setFortuneType] = useState(null);\n  const [fortuneStyle, setFortuneStyle] = useState(null);\n  const [auraColor, setAuraColor] = useState(null);\n  const [fortune, setFortune] = useState('');\n\n  const generateFortune = async () => {\n    try {\n      const response = await axios.post(\n        'https://api.openai.com/v1/completions',\n        {\n          model: 'text-davinci-003',\n          prompt: `Generate a ${fortuneType} fortune in a ${fortuneStyle} concidering the aura meaning of the ${auraColor} color`,\n          temperature: 0,\n          max_tokens: 300,\n        },\n        {\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: 'Bearer ' + process.env.REACT_APP_API_KEY,\n          },\n        }\n      );\n      const newFortune = response.data.choices[0].text;\n      setFortune(newFortune);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return (\n    <div className='app-body'>\n      {!fortuneType ? (\n        <FortuneType setFortuneType={setFortuneType} />\n      ) : !fortuneStyle ? (\n        <FortuneStyle onStyleSelection={setFortuneStyle} />\n      ) : !auraColor ? (\n        <AuraColor setAuraColor={setAuraColor} />\n      ) : (\n        <FortuneTeller fortune={fortune} auraColor={auraColor} generateFortune={generateFortune} />\n      )}\n\n\n        <div>\n          {!fortuneType ? null:( <ResultCard backText={fortuneType} /> ) }\n\n          {!fortuneStyle ? null:( <ResultCard backText={fortuneStyle} /> ) }\n\n          {!auraColor ? null:( <ResultCard backText={auraColor} /> ) }\n    </div>\n    </div>\n  );\n};\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,QAAQ;AAC3B,OAAOC,WAAW,MAAM,0BAA0B;AAClD,OAAOC,YAAY,MAAM,2BAA2B;AACpD,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,aAAa,MAAM,4BAA4B;AACtD,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAO,WAAW;AAAC;AAEnBL,MAAM,CAACM,MAAM,EAAE;AAEf,MAAMC,GAAG,GAAG,MAAM;EAAA;EAChB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACY,YAAY,EAAEC,eAAe,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACc,SAAS,EAAEC,YAAY,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACgB,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAE1C,MAAMkB,eAAe,GAAG,YAAY;IAClC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMlB,KAAK,CAACmB,IAAI,CAC/B,uCAAuC,EACvC;QACEC,KAAK,EAAE,kBAAkB;QACzBC,MAAM,EAAG,cAAaZ,WAAY,iBAAgBE,YAAa,wCAAuCE,SAAU,QAAO;QACvHS,WAAW,EAAE,CAAC;QACdC,UAAU,EAAE;MACd,CAAC,EACD;QACEC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClCC,aAAa,EAAE,SAAS,GAAGC,OAAO,CAACC,GAAG,CAACC;QACzC;MACF,CAAC,CACF;MACD,MAAMC,UAAU,GAAGX,QAAQ,CAACY,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI;MAChDhB,UAAU,CAACa,UAAU,CAAC;IACxB,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACtB;EACF,CAAC;EAED,oBACE;IAAK,SAAS,EAAC,UAAU;IAAA,WACtB,CAACxB,WAAW,gBACX,QAAC,WAAW;MAAC,cAAc,EAAEC;IAAe;MAAA;MAAA;MAAA;IAAA,QAAG,GAC7C,CAACC,YAAY,gBACf,QAAC,YAAY;MAAC,gBAAgB,EAAEC;IAAgB;MAAA;MAAA;MAAA;IAAA,QAAG,GACjD,CAACC,SAAS,gBACZ,QAAC,SAAS;MAAC,YAAY,EAAEC;IAAa;MAAA;MAAA;MAAA;IAAA,QAAG,gBAEzC,QAAC,aAAa;MAAC,OAAO,EAAEC,OAAQ;MAAC,SAAS,EAAEF,SAAU;MAAC,eAAe,EAAEI;IAAgB;MAAA;MAAA;MAAA;IAAA,QACzF,eAGC;MAAA,WACG,CAACR,WAAW,GAAG,IAAI,gBAAG,QAAC,UAAU;QAAC,QAAQ,EAAEA;MAAY;QAAA;QAAA;QAAA;MAAA,QAAK,EAE7D,CAACE,YAAY,GAAG,IAAI,gBAAG,QAAC,UAAU;QAAC,QAAQ,EAAEA;MAAa;QAAA;QAAA;QAAA;MAAA,QAAK,EAE/D,CAACE,SAAS,GAAG,IAAI,gBAAG,QAAC,UAAU;QAAC,QAAQ,EAAEA;MAAU;QAAA;QAAA;QAAA;MAAA,QAAK;IAAA;MAAA;MAAA;MAAA;IAAA,QAC1D;EAAA;IAAA;IAAA;IAAA;EAAA,QACA;AAEV,CAAC;AAAC,GApDIL,GAAG;AAAA,KAAHA,GAAG;AAsDT,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}